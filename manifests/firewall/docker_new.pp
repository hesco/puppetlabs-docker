
### # Generated by iptables-save v1.4.21 on Sat Aug  4 20:33:33 2018
  ### *nat
  ### :PREROUTING ACCEPT [6:920]
  ### :INPUT ACCEPT [2:616]
  ### :OUTPUT ACCEPT [2:120]
  ### :POSTROUTING ACCEPT [2:120]
  ### :DOCKER - [0:0]
  ### -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
  ### -A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
  ### -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
  ### -A DOCKER -i docker0 -j RETURN [newly implemented]
### COMMIT
### # Completed on Sat Aug  4 20:33:33 2018
### # Generated by iptables-save v1.4.21 on Sat Aug  4 20:33:33 2018
### *filter
  ### :INPUT ACCEPT [103:7556]
  ### :FORWARD ACCEPT [0:0]
  ### :OUTPUT ACCEPT [55:5176]
### :DOCKER - [0:0]
### :DOCKER-ISOLATION-STAGE-1 - [0:0]
### :DOCKER-ISOLATION-STAGE-2 - [0:0]
### :DOCKER-USER - [0:0]
  ### -A FORWARD -j DOCKER-USER [newly implemented]
  ### -A FORWARD -j DOCKER-ISOLATION-STAGE-1 [newly implemented]
  ### -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
  ### -A FORWARD -o docker0 -j DOCKER [newly implemented]
  ### -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
  ### -A FORWARD -i docker0 -o docker0 -j ACCEPT
  ### -A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2 [newly implemented]
  ### -A DOCKER-ISOLATION-STAGE-1 -j RETURN [newly implemented]
  ### -A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP [newly implemented]
  ### -A DOCKER-ISOLATION-STAGE-2 -j RETURN [newly implemented]
  ### -A DOCKER-USER -j RETURN [newly implemented]
### COMMIT
### # Completed on Sat Aug  4 20:33:33 2018



class docker::firewall::docker_new {

  Firewallchain <||> -> Firewall <||>

  if "${::network_docker0}/16" == '/16' {
    notify { 'docker::firewall::docker--check-for--network_docker0': message => "${::network_docker0}/16" }
  } else {
    # include docker::firewall::docker

    # The namevar here is in the format chain_name:table:protocol
    firewallchain { 'DOCKER:filter:IPv4':
      ensure  => present,
    }

    firewallchain { 'DOCKER-USER:filter:IPv4':
      ensure  => present,
    }

    firewallchain { 'DOCKER-ISOLATION-STAGE-1:filter:IPv4':
      ensure  => present,
    }

    firewallchain { 'DOCKER-ISOLATION-STAGE-2:filter:IPv4':
      ensure  => present,
    }

    # -A FORWARD -j DOCKER-USER
    firewall { '00100 forward to DOCKER-USER':
      chain   => 'FORWARD',
      jump    => 'DOCKER-USER',
    }

    # -A FORWARD -j DOCKER-ISOLATION-STAGE-1
    firewall { '00100 forward to DOCKER-ISOLATION-STAGE-1':
      chain   => 'FORWARD',
      jump    => 'DOCKER-ISOLATION-STAGE-1',
    }

    # -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    firewall { '00100 accept related, established traffic returning to docker0 bridge in FORWARD chain':
       action  => 'accept',
         proto => 'all',
         chain => 'FORWARD',
      outiface => 'docker0',
       ctstate => ['RELATED','ESTABLISHED'],
    }

    # -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
    firewall { '00100 accept docker0 traffic to other interfaces on FORWARD chain':
       action  => 'accept',
         proto => 'all',
         chain => 'FORWARD',
       iniface => 'docker0',
      outiface => '! docker0',
    }

    # -A FORWARD -i docker0 -o docker0 -j ACCEPT
    firewall { '00100 accept docker0 to docker0 FORWARD traffic':
       action  => 'accept',
         proto => 'all',
         chain => 'FORWARD',
       iniface => 'docker0',
      outiface => 'docker0',
    }

    # -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER 
    firewall { '00100 DOCKER table PREROUTING LOCAL traffic':
      dst_type => 'LOCAL',
         table => 'nat',
         proto => 'all',
         chain => 'PREROUTING',
          jump => 'DOCKER',
    }

    # -A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER 
    firewall { '00100 DOCKER chain, route LOCAL non-loopback traffic to DOCKER':
            table => 'nat',
         dst_type => 'LOCAL',
            chain => 'OUTPUT',
            proto => 'all',
      destination => '! 127.0.0.1/8',
             jump => 'DOCKER',
    }

    # -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
    firewall { '00100 DOCKER chain, MASQUERADE docker bridge traffic not bound to docker bridge':
         table => 'nat',
         chain => 'POSTROUTING',
         proto => 'all',
        source => "${::network_docker0}/16",
      outiface => '! docker0',
          jump => 'MASQUERADE',
    }

    # -A DOCKER -i docker0 -j RETURN
    firewall { '00100 DOCKER chain, RETURN and remaining docker bridge packets':
         table => 'nat',
         chain => 'DOCKER',
         proto => 'all',
       iniface => 'docker0',
          jump => 'RETURN',
    }

    # -A FORWARD -o docker0 -j DOCKER
    firewall { '00100 forward to DOCKER':
      chain    => 'FORWARD',
      proto    => 'all',
      outiface => 'docker0',
      jump     => 'DOCKER',
    }

    # -A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
    firewall { '00100 DOCKER-ISOLATION-STAGE-1 docker0 traffic bound elsewhere, forward to DOCKER-ISOLATION-STAGE-2':
      chain    => 'DOCKER-ISOLATION-STAGE-1',
      iniface  => 'docker0',
      outiface => '! docker0',
      proto    => 'all',
      jump     => 'DOCKER-ISOLATION-STAGE-2',
    }

    # -A DOCKER-ISOLATION-STAGE-1 -j RETURN
    firewall { '00100 DOCKER-ISOLATION-STAGE-1 traffic RETURNs':
      chain    => 'DOCKER-ISOLATION-STAGE-1',
      proto    => 'all',
      jump     => 'RETURN',
    }

    # -A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
    firewall { '00100 DOCKER-ISOLATION-STAGE-2 traffic heading back to docker0 bridge is DROPed':
      chain    => 'DOCKER-ISOLATION-STAGE-2',
      outiface => 'docker0',
      proto    => 'all',
      action   => 'drop',
    }

    # -A DOCKER-ISOLATION-STAGE-2 -j RETURN
    firewall { '00100 DOCKER-ISOLATION-STAGE-2 traffic now RETURNed':
      chain    => 'DOCKER-ISOLATION-STAGE-2',
      proto    => 'all',
      jump     => 'RETURN',
    }

    # -A DOCKER-USER -j RETURN
    firewall { '00100 DOCKER-USER traffic now RETURNed':
      chain    => 'DOCKER-USER',
      proto    => 'all',
      jump     => 'RETURN',
    }

  }

}

